# CREATE opcode with invalid EOF1 in initcode or in deployed code
CREATE_EOF1Invalid:
  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x020000'
    currentGasLimit: '89128960'
    currentBaseFee: '10'
    currentNumber: '1'
    currentTimestamp: '1000'
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6

  pre:
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: 200000000
      code: ''
      nonce: 0
      storage: {}
    b94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: 0
      code: |
        :yul 
        {
          calldatacopy(0, 0, calldatasize()) 
          sstore(0, create(0, 0, calldatasize()))
          sstore(1, 1)
        }
      nonce: 0
      storage: {}

  transaction:
    data: 
      # Legacy initcode trying to deploy invalid EOF code containing truncated RJUMP
      # Code to be deployed: RJUMP( - 0xef0001010004020001000103000000000000005c
      - ':label valid_init_invalid_code_truncated_rjump_a :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef0001010004020001000103000000000000005c" }'
      # Code to be deployed: RJUMP(0 - 0xef0001010004020001000203000000000000005c00
      - ':label valid_init_invalid_code_truncated_rjump_b :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef0001010004020001000203000000000000005c00" }'

      # Legacy initcode trying to deploy invalid EOF code containing RJUMP with target outside of code bounds
      # - Jump into header
      # Code to be deployed: RJUMP(-5) - 0xef0001010004020001000303000000000000005cfffb
      - ':label valid_init_invalid_code_rjump_into_header :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef0001010004020001000303000000000000005cfffb" }'
      # - Jump before code begin
      # Code to be deployed: RJUMP(-23) - 0xef0001010004020001000303000000000000005cffe9
      - ':label valid_init_invalid_code_rjump_to_before_code_begin :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef0001010004020001000303000000000000005cffe9" }'
      # - Jump into data section
      # Code to be deployed: RJUMP(2) - Data: aabbccdd -  0xef0001010004020001000303000400000000005c0002aabbccdd
      - ':label valid_init_invalid_code_rjump_into_data_section :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef0001010004020001000303000400000000005c0002aabbccdd" }'
      # - Jump after code end
      # Code to be deployed: RJUMP(2) - 0xef0001010004020001000303000000000000005c0002
      - ':label valid_init_invalid_code_rjump_to_after_code_end :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef0001010004020001000303000000000000005c0002" }'
      # - Jump to code end
      # Code to be deployed: RJUMP(1) STOP - 0xef0001010004020001000403000000000000005c000100
      - ':label valid_init_invalid_code_rjump_to_code_end :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef0001010004020001000403000000000000005c000100" }'
      # - Jump to code end
      # Code to be deployed: RJUMP(0) - 0xef0001010004020001000403000000000000005c000100
      - ':label valid_init_invalid_code_rjump_to_code_end :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef0001010004020001000303000000000000005c0000" }'

      # Legacy initcode trying to deploy invalid EOF code containing RJUMP with target PUSH/RJUMP/RJUMPI's immediate
      # - Jump to same RJUMP Immediate
      # Code to be deployed: RJUMP(-1) - 0xef0001010004020001000303000000000000005cffff
      - ':label valid_init_invalid_code_rjump_to_self_immediate :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef0001010004020001000303000000000000005cffff" }'
      # - Jump to another RJUMP immediate
      # Code to be deployed: RJUMP(3) STOP RJUMP(-4) - 0xef0001010004020001000703000000000000005c0003005cfffc
      - ':label valid_init_invalid_code_rjump_to_rjump_immediate :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef0001010004020001000703000000000000005c0003005cfffc" }'
      # - Jump to RJUMPI immediate
      # Code to be deployed: RJUMP(5) STOP PUSH1(1) RJUMPI(-6) STOP - 0xef0001010004020001000a03000000000000015c00050060015dfffa00
      - ':label valid_init_invalid_code_rjump_to_rjumpi_immediate :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef0001010004020001000a03000000000000015c00050060015dfffa00" }'
      # - Jump to PUSH immediate
      # Code to be deployed: RJUMP(2) NOP PUSH1(1) PUSH1(1) SSTORE STOP - 0xef0001010004020001000a03000000000000025c00025b600160015500
      - ':label valid_init_invalid_code_rjump_to_push_immediate :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef0001010004020001000a03000000000000025c00025b600160015500" }'
      # TODO jump to RJUMPV, CALLF immediate

      # Legacy initcode trying to deploy invalid EOF code containing truncated RJUMPI
      # Code to be deployed: PUSH(0) RJUMPI( - 0xef00010100040200010003030000000000000160005d
      - ':label valid_init_invalid_code_truncated_rjumpi_a :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef00010100040200010003030000000000000160005d" }'
      # Code to be deployed: PUSH(0) RJUMPI(0? - 0xef00010100040200010004030000000000000160005d00
      - ':label valid_init_invalid_code_truncated_rjumpi_b :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef00010100040200010004030000000000000160005d00" }'
      # Legacy initcode trying to deploy invalid EOF code containing RJUMPI with target outside of code bounds
      # - Jump into header
      # Code to be deployed: PUSH1(1) RJUMPI(-7) STOP - 0xef00010100040200010006030000000000000160015dfff900
      - ':label valid_init_invalid_code_rjumpi_into_header :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef00010100040200010006030000000000000160015dfff900" }'
      # - Jump to before code begin
      # Code to be deployed: PUSH1(1) RJUMPI(-25) STOP - 0xef00010100040200010006030000000000000160015dffe700
      - ':label valid_init_invalid_code_rjumpi_to_before_code_begin :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef00010100040200010006030000000000000160015dffe700" }'
      # - Jump into data section
      # Code to be deployed: PUSH1(1) RJUMPI(2) STOP - Data aabbccdd - 0xef00010100040200010006030004000000000160015d000200aabbccdd
      - ':label valid_init_invalid_code_rjumpi_into_data_section :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef00010100040200010006030004000000000160015d000200aabbccdd" }'
      # - Jump to after code end
      # Code to be deployed: PUSH1(1) RJUMPI(2) STOP - 0xef00010100040200010006030000000000000160015d000200
      - ':label valid_init_invalid_code_rjumpi_to_after_code_end :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef00010100040200010006030000000000000160015d000200" }'
      # - Jump to code end
      # Code to be deployed: PUSH1(1) RJUMPI(1) STOP - 0xef00010100040200010006030000000000000160015d000100
      - ':label valid_init_invalid_code_rjumpi_to_code_end :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef00010100040200010006030000000000000160015d000100" }'

      # Legacy initcode containing RJUMPI with target PUSH/RJUMP/RJUMPI immediate
      # - Jump to same RJUMPI immediate
      # Code to be deployed: PUSH1(1) RJUMPI(-1) STOP - 0xef00010100040200010006030000000000000160015dffff00
      - ':label valid_init_invalid_code_rjumpi_to_self_immediate :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef00010100040200010006030000000000000160015dffff00" }'
      # - Jump to another RJUMPI immediate
      # Code to be deployed: PUSH1(1) RJUMPI(5) STOP PUSH1(1) RJUMPI(-11) STOP - 0xef0001010004020001000c030000000000000160015d00050060015dfff500
      - ':label valid_init_invalid_code_rjumpi_to_rjumpi_immediate :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef0001010004020001000c030000000000000160015d00050060015dfff500" }'
      # - Jump to RJUMP Immediate
      # Code to be deployed: PUSH1(1) RJUMPI(3) STOP RJUMP(-9) - 0xef00010100040200010009030000000000000160015d0003005cfff7
      - ':label valid_init_invalid_code_rjumpi_to_rjump_immediate :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef00010100040200010009030000000000000160015d0003005cfff7" }'
      # - Jump to PUSH Immediate
      # Code to be deployed: PUSH1(1) RJUMPI(-4) STOP - 0xef00010100040200010006030000000000000160015dfffc00
      - ':label valid_init_invalid_code_rjumpi_to_push_immediate :yul object "c" { code { datacopy(0, dataoffset("r"), datasize("r")) return(0, datasize("r")) } data "r" hex"ef00010100040200010006030000000000000160015dfffc00" }'
      # TODO jump to RJUMPV, CALLF immediate

      # TODO invalid RJUMPV
    gasLimit:
      - 15000000
    gasPrice: 10
    nonce: 0
    secretKey: 45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8
    to: 'b94f5374fce5edbc8e2a8697c15331677e6ebf0b'
    value:
      - 0

  expect:
    - indexes: {}
      network:
        - 'Merge'
      result:
       a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
          nonce: 1
       b94f5374fce5edbc8e2a8697c15331677e6ebf0b:
          nonce: '1'
          storage:
            '0': '0'
            '1': '1'
       f1ecf98489fa9ed60a664fc4998db699cfa39d40:
          shouldnotexist: 1
    
    # Same expectation, but for Merge execution fails on EF byte, for 4200 it fails because EOF initcode or code is invalid
    - indexes: {}
      network:
        - 'Shanghai'
      result:
       a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
          nonce: 1
       b94f5374fce5edbc8e2a8697c15331677e6ebf0b:
          nonce: '1'
          storage:
            '0': '0'
            '1': '1'
       f1ecf98489fa9ed60a664fc4998db699cfa39d40:
          shouldnotexist: 1
