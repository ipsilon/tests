# CREATE2 opcode with invalid EOF1 in initcode or in deployed code called from inside EOF contract
# ---
# Tests filled with geth version in: https://github.com/ipsilon/go-ethereum/tree/c673883fae922f84c3ae1e66fd4e3f9a3d6683c3
# Active EIPs: 3540, 3670, 4200, 4750, 5450
CREATE2_EOF1Invalid_FromEOF:
  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x020000'
    currentGasLimit: '89128960'
    currentBaseFee: '10'
    currentNumber: '1'
    currentTimestamp: '1000'
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6

  pre:
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: 200000000
      code: ''
      nonce: 0
      storage: {}
    b94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: 0
      # code: ":yul { calldatacopy(0, 0, calldatasize()) sstore(0, create2(0, 0, calldatasize(), 0)) sstore(1, 1) stop() }"
      code: ":raw 0xef00010100040200010017030000000000000436600060003760003660006000f5600055600160015500"
      nonce: 0
      storage: {}

  transaction:
    data: 
      # Malformed initcode
      
      # No magic
      - ':raw 0xef'
      # Invalid magic
      - ':raw 0xef0101010004020001002903000000000000027fef000101000402000100010300000000000000fe00000000000000000000000060005260146000f3'
      - ':raw 0xef0201010004020001002903000000000000027fef000101000402000100010300000000000000fe00000000000000000000000060005260146000f3'
      - ':raw 0xefff01010004020001002903000000000000027fef000101000402000100010300000000000000fe00000000000000000000000060005260146000f3'
      # No version
      - ':raw 0xef00'
      # Invalid version
      - ':raw 0xef0000010004020001002903000000000000027fef000101000402000100010300000000000000fe00000000000000000000000060005260146000f3'
      - ':raw 0xef0002010004020001002903000000000000027fef000101000402000100010300000000000000fe00000000000000000000000060005260146000f3'
      - ':raw 0xef00ff010004020001002903000000000000027fef000101000402000100010300000000000000fe00000000000000000000000060005260146000f3'
      # No header
      - ':raw 0xef0001'
      # No sections
      - ':raw 0xef000100'
      # No type section size
      - ':raw 0xef000101'
      # Type section size incomplete
      - ':raw 0xef00010100'
      # No total of code sections
      - ':raw 0xef000101000402'
      # Total of code sections incomplete
      - ':raw 0xef00010100040200'
      # No code section size
      - ':raw 0xef0001010004020001'
      # Code section size incomplete
      - ':raw 0xef000101000402000100'
      # No data section after code section size
      - ':raw 0xef00010100040200010001'
      # No section terminator after data section size
      - ':raw 0xef00010100040200010001030000'
      # No code section contents
      - ':raw 0xef000101000402000000010300000000000000'
      - ':raw 0xef000101000402000000000300000000000000'
      - ':raw 0xef00010100040200000300000000000000'
      - ':raw 0xef0001010000020000000003000000'
      - ':raw 0xef000101000002000003000000'
      # Type section contents incomplete
      - ':raw 0xef0001010004020001000103000000000000fe'
      # Code section contents incomplete
      - ':raw 0xef000101000402000100020300000000000000fe'
      # Trailing bytes after code section
      - ':raw 0xef00010100040200010004030000000000000160015000deadbeef'
      # Empty code section
      - ':raw 0xef000101000402000000000300000000000000'
      - ':raw 0xef000101000002000000000300000000000000'
      - ':raw 0xef000101000002000003000000'
      # Empty code section with non-empty data section
      - ':raw 0xef000101000402000100000300020000000000aabb'
      # Code section preceding type section
      - ':raw 0xef000102000100010100040300020000000000feaabb'
      # Data section preceding type section
      - ':raw 0xef000103000201000402000100010000000000feaabb'
      # Data section preceding code section
      - ':raw 0xef000101000403000202000100010000000000feaabb'
      # Data section without code section
      - ':raw 0xef00010100040300020000000000aabb'
      # No data section
      - ':raw 0xef000101000402000100010000000000fe'
      # No data section size
      - ':raw 0xef0001010004020001000103'
      # Data section size incomplete
      - ':raw 0xef000101000402000100010300'
      # No section terminator after data section size
      - ':raw 0xef00010100040200010001030002'
      - ':raw 0xef0001010004020001000103000200000000feaabb'
      # No data section contents
      - ':raw 0xef000101000402000100010300020000000000fe'
      # Data section contents incomplete
      - ':raw 0xef000101000402000100010300040000000000feaabbcc'
      # Trailing bytes after data section
      - ':raw 0xef000101000402000100010300040000000000feaabbccddee'
      # Multiple data sections
      - ':raw 0xef000101000402000100010300020300020000000000feaabbaabb'
      # Multiple code and data sections
      - ':raw 0xef000101000802000200010001030002030002000000000000000000fefeaabbaabb'
      # Unknown section IDs
      #   at the beginning
      - ':raw 0xef000104000300600000'
      - ':raw 0xef000105000300600000'
      - ':raw 0xef0001ff000300600000'
      #  after types section
      - ':raw 0xef000101000404000002000100010000000000fe'
      - ':raw 0xef000101000405000002000100010000000000fe'
      - ':raw 0xef0001010004ff000002000100010000000000fe'
      #  after code section
      - ':raw 0xef000101000402000104000000010000000000fe'
      - ':raw 0xef000101000402000105000000010000000000fe'
      - ':raw 0xef0001010004020001ff000000010000000000fe'
      #  after data section
      - ':raw 0xef000101000402000100010300010400000000000000feaa'
      - ':raw 0xef000101000402000100010300010500000000000000feaa'
      - ':raw 0xef00010100040200010001030001ff00000000000000feaa'

      # Valid legacy initcode returning malformed code
      
      # No magic
      - ':yul { mstore8(0, 0xef) return(0, 1) }'
      # Invalid magic
      - ':yul { mstore(0, 0xef010101000402000100010300000000000000fe000000000000000000000000) return(0, 20) }'
      - ':yul { mstore(0, 0xef020101000402000100010300000000000000fe000000000000000000000000) return(0, 20) }'
      - ':yul { mstore(0, 0xefff0101000402000100010300000000000000fe000000000000000000000000) return(0, 20) }'
      # No version
      - ':yul { mstore(0, 0xef00000000000000000000000000000000000000000000000000000000000000) return(0, 2) }'
      # Invalid version
      - ':yul { mstore(0, 0xef000001000402000100010300000000000000fe000000000000000000000000) return(0, 20) }'
      - ':yul { mstore(0, 0xef000201000402000100010300000000000000fe000000000000000000000000) return(0, 20) }'
      - ':yul { mstore(0, 0xef00ff01000402000100010300000000000000fe000000000000000000000000) return(0, 20) }'
      # No header
      - ':yul { mstore(0, 0xef00010000000000000000000000000000000000000000000000000000000000) return(0, 3) }'
      # No sections
      - ':yul { mstore(0, 0xef00010000000000000000000000000000000000000000000000000000000000) return(0, 4) }'
      # No type section size
      - ':yul { mstore(0, 0xef00010100000000000000000000000000000000000000000000000000000000) return(0, 4) }'
      # Type section size incomplete
      - ':yul { mstore(0, 0xef00010100000000000000000000000000000000000000000000000000000000) return(0, 5) }'
      # No total of code sections
      - ':yul { mstore(0, 0xef00010100040200000000000000000000000000000000000000000000000000) return(0, 7) }'
      # Total of code sections incomplete
      - ':yul { mstore(0, 0xef00010100040200000000000000000000000000000000000000000000000000) return(0, 8) }'
      # No code section size
      - ':yul { mstore(0, 0xef00010100040200010000000000000000000000000000000000000000000000) return(0, 9) }'
      # Code section size incomplete
      - ':yul { mstore(0, 0xef00010100040200010000000000000000000000000000000000000000000000) return(0, 10) }'
      # No data section after code section size
      - ':yul { mstore(0, 0xef00010100040200010001000000000000000000000000000000000000000000) return(0, 11) }'
      # No section terminator after data section size
      - ':yul { mstore(0, 0xef00010100040200010001030000000000000000000000000000000000000000) return(0, 14) }'
      # No code section contents
      - ':yul { mstore(0, 0xef00010100040200000001030000000000000000000000000000000000000000) return(0, 19) }'
      - ':yul { mstore(0, 0xef00010100040200000000030000000000000000000000000000000000000000) return(0, 19) }'
      - ':yul { mstore(0, 0xef00010100040200000300000000000000000000000000000000000000000000) return(0, 17) }'
      - ':yul { mstore(0, 0xef00010100000200000000030000000000000000000000000000000000000000) return(0, 15) }'
      - ':yul { mstore(0, 0xef00010100000200000300000000000000000000000000000000000000000000) return(0, 13) }'
      # Type section contents incomplete
      - ':yul { mstore(0, 0xef0001010004020001000100000000fe00000000000000000000000000000000) return(0, 16) }'
      # Code section contents incomplete
      - ':yul { mstore(0, 0xef000101000402000100020300000000000000fe000000000000000000000000) return(0, 20) }'
      # Trailing bytes after code section
      - ':yul { mstore(0, 0xef00010100040200010004030000000000000160015000deadbeef0000000000) return(0, 27) }'
      # Empty code section
      - ':yul { mstore(0, 0xef00010100040200000000030000000000000000000000000000000000000000) return(0, 19) }'
      - ':yul { mstore(0, 0xef00010100000200000000030000000000000000000000000000000000000000) return(0, 19) }'
      - ':yul { mstore(0, 0xef00010100000200000300000000000000000000000000000000000000000000) return(0, 13) }'
      # Empty code section with non-empty data section
      - ':yul { mstore(0, 0xef000101000402000100000300020000000000aabb0000000000000000000000) return(0, 21) }'
      # Code section preceding type section
      - ':yul { mstore(0, 0xef000102000100010100040300020000000000feaabb00000000000000000000) return(0, 22) }'
      # Data section preceding type section
      - ':yul { mstore(0, 0xef000103000201000402000100010000000000feaabb00000000000000000000) return(0, 22) }'
      # Data section preceding code section
      - ':yul { mstore(0, 0xef000101000403000202000100010000000000feaabb00000000000000000000) return(0, 22) }'
      # Data section without code section
      - ':yul { mstore(0, 0xef00010100040300020000000000aabb00000000000000000000000000000000) return(0, 16) }'
      # No data section
      - ':yul { mstore(0, 0xef000101000402000100010000000000fe000000000000000000000000000000) return(0, 17) }'
      # No data section size
      - ':yul { mstore(0, 0xef00010100040200010001030000000000000000000000000000000000000000) return(0, 12) }'
      # Data section size incomplete
      - ':yul { mstore(0, 0xef00010100040200010001030000000000000000000000000000000000000000) return(0, 13) }'
      # No section terminator after data section size
      - ':yul { mstore(0, 0xef00010100040200010001030002000000000000000000000000000000000000) return(0, 14) }'
      - ':yul { mstore(0, 0xef0001010004020001000103000200000000feaabb0000000000000000000000) return(0, 21) }'
      # No data section contents
      - ':yul { mstore(0, 0xef000101000402000100010300020000000000fe000000000000000000000000) return(0, 20) }'
      # Data section contents incomplete
      - ':yul { mstore(0, 0xef000101000402000100010300040000000000feaabbcc000000000000000000) return(0, 23) }'
      # Trailing bytes after data section
      - ':yul { mstore(0, 0xef000101000402000100010300040000000000feaabbccddee00000000000000) return(0, 25) }'
      # Multiple data sections
      - ':yul { mstore(0, 0xef000101000402000100010300020300020000000000feaabbaabb0000000000) return(0, 27) }'
      # Multiple code and data sections
      - ':yul { mstore(0, 0xef000101000802000200010001030002030002000000000000000000fefeaabb) mstore(32, 0xaabb000000000000000000000000000000000000000000000000000000000000) return(0, 34) }'
      # Unknown section IDs
      #   at the beginning
      - ':yul { mstore(0, 0xef00010400030060000000000000000000000000000000000000000000000000) return(0, 10) }'
      - ':yul { mstore(0, 0xef00010500030060000000000000000000000000000000000000000000000000) return(0, 10) }'
      - ':yul { mstore(0, 0xef0001ff00030060000000000000000000000000000000000000000000000000) return(0, 10) }'
      #   after types
      - ':yul { mstore(0, 0xef000101000404000002000100010000000000fe000000000000000000000000) return(0, 20) }'
      - ':yul { mstore(0, 0xef000101000405000002000100010000000000fe000000000000000000000000) return(0, 20) }'
      - ':yul { mstore(0, 0xef0001010004ff000002000100010000000000fe000000000000000000000000) return(0, 20) }'
      #   after code
      - ':yul { mstore(0, 0xef000101000402000104000000010000000000fe000000000000000000000000) return(0, 20) }'
      - ':yul { mstore(0, 0xef000101000402000105000000010000000000fe000000000000000000000000) return(0, 20) }'
      - ':yul { mstore(0, 0xef0001010004020001ff000000010000000000fe000000000000000000000000) return(0, 20) }'
      #   after data
      - ':yul { mstore(0, 0xef000101000402000100010300010400000000000000feaa0000000000000000) return(0, 24) }'
      - ':yul { mstore(0, 0xef000101000402000100010300010500000000000000feaa0000000000000000) return(0, 24) }'
      - ':yul { mstore(0, 0xef00010100040200010001030001ff00000000000000feaa0000000000000000) return(0, 24) }'

      # Legacy initcode => EOF code
      # deployed code without data section
      # deployed code section: PUSH1(0) POP STOP
      - ':yul { mstore(0, 0xef00010100040200010004030000000000000160005000000000000000000000) return(0, 23) }'
      # deployed code with data section
      # deployed code section:
      #     code: PUSH1(0) POP STOP
      #     data section: aabbccdd
      - ':yul { mstore(0, 0xef00010100040200010004030004000000000160005000aabbccdd0000000000) return(0, 27) }'


    gasLimit:
      - 15000000
    gasPrice: 10
    nonce: 0
    secretKey: 45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8
    to: 'b94f5374fce5edbc8e2a8697c15331677e6ebf0b'
    value:
    - 0

  expect:
    - indexes: {}
      network:
        - 'Shanghai'
      result:
       a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
          nonce: 1
       b94f5374fce5edbc8e2a8697c15331677e6ebf0b:
          nonce: '0'
          storage:
            '0': '0'
            '1': '1'
